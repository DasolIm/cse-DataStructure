#include <stdio.h>
#include <stdlib.h>

typedef struct listnode
{
	int coef;
	int expon;
	struct listnode* link;
} listnode;

typedef struct listtype
{
	int size;
	listnode* head;
	listnode* tail;
} listtype;

listnode* create()
{
	listtype* plist = (listtype*)malloc(sizeof(listtype));
	plist->size = 0;
	plist->head = NULL;
	plist->tail = NULL;
	return plist;
}

void insert_last(listtype* plist, int coef, int expon)
{
	listnode* temp = (listnode*)malloc(sizeof(listnode));
	temp->coef = coef;
	temp->expon = expon;
	temp->link = NULL;

	if (plist->tail == NULL)
	{
		plist->head = temp;
		plist->tail = temp;
	}
	else
	{
		plist->tail->link = temp;
		plist->tail = temp;
	}
	plist->size++;
}

void poly_add(listtype* plist1, listtype* plist2, listtype* plist3)
{
	int sum;
	listnode* a = plist1->head;
	listnode* b = plist2->head;

	while (a && b)
	{
		if (a->expon == b->expon)
		{
			sum = a->coef + b->coef;
			if (sum != 0) insert_last(plist3, sum, a->expon);
			a = a->link;
			b = b->link;
		}
		else if (a->expon < b->expon)
		{
			insert_last(plist3, b->coef, b->expon);
			b = b->link;
		}
		else
		{
			insert_last(plist3, a->coef, a->expon);
			a = a->link;
		}
	}

	for (; a != NULL; a = a->link)
	{
		insert_last(plist3, a->coef, a->expon);
	}
	for (; b != NULL; b = b->link)
	{
		insert_last(plist3, b->coef, b->expon);
	}
}

void poly_print(listtype* plist)
{
	listnode* p = plist->head;
	for (; p; p = p->link)
	{
		printf("%dx^%d + ", p->coef, p->expon);
	}
	printf("\n");
}

int main()
{
	listtype* list1, *list2, *list3;

	list1 = create();
	list2 = create();
	list3 = create();

	insert_last(list1, 3, 12);
	insert_last(list1, 2, 8);
	insert_last(list1, 1, 0);

	insert_last(list2, 8, 12);
	insert_last(list2, -3, 10);
	insert_last(list2, 10, 6);

	poly_add(list1, list2, list3);
	poly_print(list3);

	return 0;
}
