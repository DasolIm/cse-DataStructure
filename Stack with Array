#include <stdio.h>
#include <stdlib.h>
#define MAX_STACK_SIZE 5

typedef int element;
typedef struct
{
	element data[MAX_STACK_SIZE];
	int top;
} Stacktype;

void init_stack(Stacktype* s)
{
	s->top = -1;
}

int is_full(Stacktype* s)
{
	return (s->top == MAX_STACK_SIZE - 1);
}

void push(Stacktype* s, element item)
{
	//push()를 진행하려면 먼저 꽉 차있는지 확인해줘야 함
	if (is_full(s))
	{
		printf("OVERFLOW ERROR\n");
		return;
	}
	else
	{
		s->data[++(s->top)] = item;
	}
}

int is_empty(Stacktype* s)
{
	return (s->top == -1);
}

element pop(Stacktype* s)
{
	//★반환형이 element인 이유
	//반환형이 단순한 정수가 아니라 data 배열의 stack의 원소 중 하나를 리턴하므로
	//★비어있으면 꺼내줄 수 있는 값이 없으므로 underflow error 발생
	//먼저 검사해주어야 함
	if (is_empty(s))
	{
		printf("UNDERFLOW ERROR\n");
		//함수의 반환형 자체가 정수형을 반환해야하므로 아무숫자나 return 하는 것은 위험
		//stdlib 라이브러리의 exit 사용
		exit(1);
	}
	else
	{
		//현재 해당하는 top값을 보여주고 나서 후위 마이너스 연산
		return s->data[(s->top)--];
	}
}

//peek() : 스택의 top값을 확인만 해주는 함수
element peek(Stacktype* s)
{
	if (is_empty(s))
	{
		printf("UNDERFLOW ERROR\n");
	}
	else
	{
		return s->data[s->top];
	}
}

int main()
{
	Stacktype s; //구조체변수만큼 메모리가 만들어짐

	init_stack(&s);
	push(&s, 10); //0번 인덱스에 10
	push(&s, 20); //1번 인덱스에 20
	push(&s, 30); //2번 인덱스에 30
	
	printf("pop value = %d\n", pop(&s));
	printf("pop value = %d\n", pop(&s));
	printf("peek value = %d\n", peek(&s));

	return 0;
}
