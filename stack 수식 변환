#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STACK_SIZE 5

typedef int element;

typedef struct
{
	element data[MAX_STACK_SIZE];
	int top;
} Stacktype;

void init(Stacktype* s)
{
	s->top = -1;
}

int full(Stacktype* s)
{
	return (s->top == MAX_STACK_SIZE - 1);
}

int empty(Stacktype* s)
{
	return (s->top == -1);
}

void push(Stacktype* s, element item)
{
	if (full(s))
	{
		printf("overflow error\n");
		return;
	}
	else
	{
		s->data[++(s->top)] = item;
	}
}

element pop(Stacktype* s)
{
	if (empty(s))
	{
		printf("underflow error\n");
		exit(1);
	}
	else
	{
		return s->data[(s->top)--];
	}
}

element peek(Stacktype* s)
{
	if (empty(s))
	{
		printf("underflow error\n");
		exit(1);
	}
	else
	{
		return s->data[s->top];
	}
}

int prec(char op)
{
	switch (op)
	{
	case '(': case ')':
		return 0;
	case '+': case '-':
		return 1;
	case '*': case '/':
		return 2;
	}
	return -1;
}

void infix_to_postfix(const char* arr)
{
	char ch, top_op;
	int len = strlen(arr);
	
	Stacktype s;
	init(&s);

	for (int i = 0; i < len; i++)
	{
		ch = arr[i];

		switch (ch)
		{
		case '+': case '-': case '*': case '/':
			while (!empty(&s) && prec(ch) <= prec(peek(&s)))
			{
				printf("%c", pop(&s));
			}
			push(&s, ch);
			break;
		case '(':
			push(&s, ch);
			break;
		case ')':
			top_op = pop(&s);
			while (top_op != '(')
			{
				printf("%c", top_op);
				top_op = pop(&s);
			}
			break;
		default:
			printf("%c", ch);
			break;
		}
	}

	while (!empty(&s))
	{
		printf("%c", pop(&s));
	}
}

int main()
{
	const char* tmp = "(4+2)*3-1";
	infix_to_postfix(tmp);
	
	return 0;
}
