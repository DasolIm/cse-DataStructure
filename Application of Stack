
//스택의 응용 : 괄호 검사 문제

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STACK_SIZE 5

typedef int element;

typedef struct
{
	element data[MAX_STACK_SIZE];
	int top;
} Stacktype;

void init(Stacktype* s)
{
	s->top = -1;
}

int is_full(Stacktype* s)
{
	return s->top == MAX_STACK_SIZE - 1;
}

void push(Stacktype* s, element item)
{
	//overflow check
	if (is_full(s))
	{
		printf("스택포화에러\n");
		return;
	}
	else
	{
		s->data[++(s->top)] = item;
	}
}

int is_empty(Stacktype* s)
{
	return s->top == -1;
}

element pop(Stacktype* s)
{
	//underflow check!
	if (is_empty(s))
	{
		printf("스택공백에러\n");
		return -1;
	}
	else
	{
		element item = s->data[s->top--];
		return item;
	}
}

int check_matching(const char* in)
{
	Stacktype s;
	int n = strlen(in); //13
	char ch, open_ch;

	init(&s);

	for (int i = 0; i < n; i++)
	{
		ch = in[i];

		switch (ch)
		{
		case '(':
		case '[':
		case '{': push(&s, ch); break;
		case ')': case ']': case '}':
			if (is_empty(&s)) return 0;
			else
			{
				open_ch = pop(&s);
				if ((open_ch == '(' && ch != ')') ||
					(open_ch == '[' && ch != ']') ||
					(open_ch == '{' && ch != '}')  )
				{
					return 0;
				}
				break;
			} //end else
		} //end witch
	} //end for

	//for문이 다 끝났는데 stack에 무언가 남아있으면 안되므로 마지막 처리가 필요
	if (!is_empty(&s)) return 0;
	return 1;
}

int main()
{
	const char* p = "{ A[(i+1)] = 0; }";

	if (check_matching(p) == 1)
	{
		printf("%s : 괄호 검사 성공\n", p);
	}
	else
	{
		printf("%s : 괄호 검사 실패\n", p);
	}

	return 0;
}
